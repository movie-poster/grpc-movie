// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: proto/genre.proto

package genre

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GenreCrud_Insert_FullMethodName = "/api.v1.GenreCrud/Insert"
	GenreCrud_List_FullMethodName   = "/api.v1.GenreCrud/List"
	GenreCrud_Delete_FullMethodName = "/api.v1.GenreCrud/Delete"
)

// GenreCrudClient is the client API for GenreCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenreCrudClient interface {
	Insert(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*ResponseGenre, error)
	List(ctx context.Context, in *ListRequestGenre, opts ...grpc.CallOption) (*ResponseGenre, error)
	Delete(ctx context.Context, in *RequestByIdGenre, opts ...grpc.CallOption) (*ResponseGenre, error)
}

type genreCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewGenreCrudClient(cc grpc.ClientConnInterface) GenreCrudClient {
	return &genreCrudClient{cc}
}

func (c *genreCrudClient) Insert(ctx context.Context, in *Genre, opts ...grpc.CallOption) (*ResponseGenre, error) {
	out := new(ResponseGenre)
	err := c.cc.Invoke(ctx, GenreCrud_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreCrudClient) List(ctx context.Context, in *ListRequestGenre, opts ...grpc.CallOption) (*ResponseGenre, error) {
	out := new(ResponseGenre)
	err := c.cc.Invoke(ctx, GenreCrud_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreCrudClient) Delete(ctx context.Context, in *RequestByIdGenre, opts ...grpc.CallOption) (*ResponseGenre, error) {
	out := new(ResponseGenre)
	err := c.cc.Invoke(ctx, GenreCrud_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenreCrudServer is the server API for GenreCrud service.
// All implementations must embed UnimplementedGenreCrudServer
// for forward compatibility
type GenreCrudServer interface {
	Insert(context.Context, *Genre) (*ResponseGenre, error)
	List(context.Context, *ListRequestGenre) (*ResponseGenre, error)
	Delete(context.Context, *RequestByIdGenre) (*ResponseGenre, error)
	mustEmbedUnimplementedGenreCrudServer()
}

// UnimplementedGenreCrudServer must be embedded to have forward compatible implementations.
type UnimplementedGenreCrudServer struct {
}

func (UnimplementedGenreCrudServer) Insert(context.Context, *Genre) (*ResponseGenre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedGenreCrudServer) List(context.Context, *ListRequestGenre) (*ResponseGenre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGenreCrudServer) Delete(context.Context, *RequestByIdGenre) (*ResponseGenre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGenreCrudServer) mustEmbedUnimplementedGenreCrudServer() {}

// UnsafeGenreCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenreCrudServer will
// result in compilation errors.
type UnsafeGenreCrudServer interface {
	mustEmbedUnimplementedGenreCrudServer()
}

func RegisterGenreCrudServer(s grpc.ServiceRegistrar, srv GenreCrudServer) {
	s.RegisterService(&GenreCrud_ServiceDesc, srv)
}

func _GenreCrud_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Genre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreCrudServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreCrud_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreCrudServer).Insert(ctx, req.(*Genre))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreCrud_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestGenre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreCrudServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreCrud_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreCrudServer).List(ctx, req.(*ListRequestGenre))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenreCrud_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIdGenre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenreCrudServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GenreCrud_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenreCrudServer).Delete(ctx, req.(*RequestByIdGenre))
	}
	return interceptor(ctx, in, info, handler)
}

// GenreCrud_ServiceDesc is the grpc.ServiceDesc for GenreCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenreCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.GenreCrud",
	HandlerType: (*GenreCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _GenreCrud_Insert_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GenreCrud_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GenreCrud_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/genre.proto",
}
