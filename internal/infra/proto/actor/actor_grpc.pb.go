// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: proto/actor.proto

package actor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActorCrud_Insert_FullMethodName  = "/api.v1.ActorCrud/Insert"
	ActorCrud_Update_FullMethodName  = "/api.v1.ActorCrud/Update"
	ActorCrud_List_FullMethodName    = "/api.v1.ActorCrud/List"
	ActorCrud_Delete_FullMethodName  = "/api.v1.ActorCrud/Delete"
	ActorCrud_GetById_FullMethodName = "/api.v1.ActorCrud/GetById"
)

// ActorCrudClient is the client API for ActorCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActorCrudClient interface {
	Insert(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*ResponseActor, error)
	Update(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*ResponseActor, error)
	List(ctx context.Context, in *ListRequestActor, opts ...grpc.CallOption) (*ResponseActor, error)
	Delete(ctx context.Context, in *RequestByIdActor, opts ...grpc.CallOption) (*ResponseActor, error)
	GetById(ctx context.Context, in *RequestByIdActor, opts ...grpc.CallOption) (*ResponseActor, error)
}

type actorCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewActorCrudClient(cc grpc.ClientConnInterface) ActorCrudClient {
	return &actorCrudClient{cc}
}

func (c *actorCrudClient) Insert(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*ResponseActor, error) {
	out := new(ResponseActor)
	err := c.cc.Invoke(ctx, ActorCrud_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorCrudClient) Update(ctx context.Context, in *Actor, opts ...grpc.CallOption) (*ResponseActor, error) {
	out := new(ResponseActor)
	err := c.cc.Invoke(ctx, ActorCrud_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorCrudClient) List(ctx context.Context, in *ListRequestActor, opts ...grpc.CallOption) (*ResponseActor, error) {
	out := new(ResponseActor)
	err := c.cc.Invoke(ctx, ActorCrud_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorCrudClient) Delete(ctx context.Context, in *RequestByIdActor, opts ...grpc.CallOption) (*ResponseActor, error) {
	out := new(ResponseActor)
	err := c.cc.Invoke(ctx, ActorCrud_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorCrudClient) GetById(ctx context.Context, in *RequestByIdActor, opts ...grpc.CallOption) (*ResponseActor, error) {
	out := new(ResponseActor)
	err := c.cc.Invoke(ctx, ActorCrud_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActorCrudServer is the server API for ActorCrud service.
// All implementations must embed UnimplementedActorCrudServer
// for forward compatibility
type ActorCrudServer interface {
	Insert(context.Context, *Actor) (*ResponseActor, error)
	Update(context.Context, *Actor) (*ResponseActor, error)
	List(context.Context, *ListRequestActor) (*ResponseActor, error)
	Delete(context.Context, *RequestByIdActor) (*ResponseActor, error)
	GetById(context.Context, *RequestByIdActor) (*ResponseActor, error)
	mustEmbedUnimplementedActorCrudServer()
}

// UnimplementedActorCrudServer must be embedded to have forward compatible implementations.
type UnimplementedActorCrudServer struct {
}

func (UnimplementedActorCrudServer) Insert(context.Context, *Actor) (*ResponseActor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedActorCrudServer) Update(context.Context, *Actor) (*ResponseActor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedActorCrudServer) List(context.Context, *ListRequestActor) (*ResponseActor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedActorCrudServer) Delete(context.Context, *RequestByIdActor) (*ResponseActor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedActorCrudServer) GetById(context.Context, *RequestByIdActor) (*ResponseActor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedActorCrudServer) mustEmbedUnimplementedActorCrudServer() {}

// UnsafeActorCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActorCrudServer will
// result in compilation errors.
type UnsafeActorCrudServer interface {
	mustEmbedUnimplementedActorCrudServer()
}

func RegisterActorCrudServer(s grpc.ServiceRegistrar, srv ActorCrudServer) {
	s.RegisterService(&ActorCrud_ServiceDesc, srv)
}

func _ActorCrud_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorCrudServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorCrud_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorCrudServer).Insert(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorCrud_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorCrudServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorCrud_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorCrudServer).Update(ctx, req.(*Actor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorCrud_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestActor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorCrudServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorCrud_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorCrudServer).List(ctx, req.(*ListRequestActor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorCrud_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIdActor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorCrudServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorCrud_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorCrudServer).Delete(ctx, req.(*RequestByIdActor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorCrud_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIdActor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorCrudServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActorCrud_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorCrudServer).GetById(ctx, req.(*RequestByIdActor))
	}
	return interceptor(ctx, in, info, handler)
}

// ActorCrud_ServiceDesc is the grpc.ServiceDesc for ActorCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActorCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ActorCrud",
	HandlerType: (*ActorCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _ActorCrud_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ActorCrud_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ActorCrud_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ActorCrud_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ActorCrud_GetById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/actor.proto",
}
