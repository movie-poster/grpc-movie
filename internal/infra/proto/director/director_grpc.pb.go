// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: proto/director.proto

package director

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DirectorCrud_Insert_FullMethodName  = "/api.v1.DirectorCrud/Insert"
	DirectorCrud_Update_FullMethodName  = "/api.v1.DirectorCrud/Update"
	DirectorCrud_List_FullMethodName    = "/api.v1.DirectorCrud/List"
	DirectorCrud_Delete_FullMethodName  = "/api.v1.DirectorCrud/Delete"
	DirectorCrud_GetById_FullMethodName = "/api.v1.DirectorCrud/GetById"
)

// DirectorCrudClient is the client API for DirectorCrud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectorCrudClient interface {
	Insert(ctx context.Context, in *Director, opts ...grpc.CallOption) (*ResponseDirector, error)
	Update(ctx context.Context, in *Director, opts ...grpc.CallOption) (*ResponseDirector, error)
	List(ctx context.Context, in *ListRequestDirector, opts ...grpc.CallOption) (*ResponseDirector, error)
	Delete(ctx context.Context, in *RequestByIdDirector, opts ...grpc.CallOption) (*ResponseDirector, error)
	GetById(ctx context.Context, in *RequestByIdDirector, opts ...grpc.CallOption) (*ResponseDirector, error)
}

type directorCrudClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectorCrudClient(cc grpc.ClientConnInterface) DirectorCrudClient {
	return &directorCrudClient{cc}
}

func (c *directorCrudClient) Insert(ctx context.Context, in *Director, opts ...grpc.CallOption) (*ResponseDirector, error) {
	out := new(ResponseDirector)
	err := c.cc.Invoke(ctx, DirectorCrud_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorCrudClient) Update(ctx context.Context, in *Director, opts ...grpc.CallOption) (*ResponseDirector, error) {
	out := new(ResponseDirector)
	err := c.cc.Invoke(ctx, DirectorCrud_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorCrudClient) List(ctx context.Context, in *ListRequestDirector, opts ...grpc.CallOption) (*ResponseDirector, error) {
	out := new(ResponseDirector)
	err := c.cc.Invoke(ctx, DirectorCrud_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorCrudClient) Delete(ctx context.Context, in *RequestByIdDirector, opts ...grpc.CallOption) (*ResponseDirector, error) {
	out := new(ResponseDirector)
	err := c.cc.Invoke(ctx, DirectorCrud_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorCrudClient) GetById(ctx context.Context, in *RequestByIdDirector, opts ...grpc.CallOption) (*ResponseDirector, error) {
	out := new(ResponseDirector)
	err := c.cc.Invoke(ctx, DirectorCrud_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorCrudServer is the server API for DirectorCrud service.
// All implementations must embed UnimplementedDirectorCrudServer
// for forward compatibility
type DirectorCrudServer interface {
	Insert(context.Context, *Director) (*ResponseDirector, error)
	Update(context.Context, *Director) (*ResponseDirector, error)
	List(context.Context, *ListRequestDirector) (*ResponseDirector, error)
	Delete(context.Context, *RequestByIdDirector) (*ResponseDirector, error)
	GetById(context.Context, *RequestByIdDirector) (*ResponseDirector, error)
	mustEmbedUnimplementedDirectorCrudServer()
}

// UnimplementedDirectorCrudServer must be embedded to have forward compatible implementations.
type UnimplementedDirectorCrudServer struct {
}

func (UnimplementedDirectorCrudServer) Insert(context.Context, *Director) (*ResponseDirector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedDirectorCrudServer) Update(context.Context, *Director) (*ResponseDirector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDirectorCrudServer) List(context.Context, *ListRequestDirector) (*ResponseDirector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDirectorCrudServer) Delete(context.Context, *RequestByIdDirector) (*ResponseDirector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDirectorCrudServer) GetById(context.Context, *RequestByIdDirector) (*ResponseDirector, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedDirectorCrudServer) mustEmbedUnimplementedDirectorCrudServer() {}

// UnsafeDirectorCrudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectorCrudServer will
// result in compilation errors.
type UnsafeDirectorCrudServer interface {
	mustEmbedUnimplementedDirectorCrudServer()
}

func RegisterDirectorCrudServer(s grpc.ServiceRegistrar, srv DirectorCrudServer) {
	s.RegisterService(&DirectorCrud_ServiceDesc, srv)
}

func _DirectorCrud_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Director)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorCrudServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectorCrud_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorCrudServer).Insert(ctx, req.(*Director))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorCrud_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Director)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorCrudServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectorCrud_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorCrudServer).Update(ctx, req.(*Director))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorCrud_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequestDirector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorCrudServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectorCrud_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorCrudServer).List(ctx, req.(*ListRequestDirector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorCrud_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIdDirector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorCrudServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectorCrud_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorCrudServer).Delete(ctx, req.(*RequestByIdDirector))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorCrud_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestByIdDirector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorCrudServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectorCrud_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorCrudServer).GetById(ctx, req.(*RequestByIdDirector))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectorCrud_ServiceDesc is the grpc.ServiceDesc for DirectorCrud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectorCrud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DirectorCrud",
	HandlerType: (*DirectorCrudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _DirectorCrud_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DirectorCrud_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DirectorCrud_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DirectorCrud_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _DirectorCrud_GetById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/director.proto",
}
